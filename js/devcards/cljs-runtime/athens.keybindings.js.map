{"version":3,"sources":["athens/keybindings.cljs"],"mappings":"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","names":["athens.keybindings/modifier-keys","e","shift","meta","ctrl","alt","athens.keybindings/get-end-points","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","G__56096","goog.dom.selection/getEndPoints","athens.keybindings/destruct-event","vec__56097","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","key","key-code","target","value","event","modifiers","start","end","selection","goog.dom.selection/getText","head","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","tail","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","athens.keybindings/ARROW-KEYS","goog.events.KeyCodes/UP","goog.events.KeyCodes/LEFT","goog.events.KeyCodes/DOWN","goog.events.KeyCodes/RIGHT","athens.keybindings/arrow-key-direction","athens.keybindings/block-start?","vec__56100","_","athens.keybindings/block-end?","map__56103","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","athens.keybindings/handle-arrow-key","uid","state","map__56107","map__56108","cljs.core/deref","top-row?","bottom-row?","index","results","type","selected-items","G__56111","re-frame.core/subscribe","direction","and__4174__auto__","cljs.core/seq","G__56114","re-frame.core/dispatch","G__56117","G__56118","G__56119","G__56120","G__56121","p1__56105#","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/update","athens.keybindings/slash-options","cur-index","container-el","js/document","next-el","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1","athens.util/is-beyond-rect?","p1__56106#","cljs.core/assoc","cljs.core/dec","athens.util/scroll-if-needed","cljs.core/inc","G__56122","G__56123","G__56124","G__56125","athens.keybindings/handle-tab","map__56126","block-zero?","athens.db/get-block","G__56128","G__56129","athens.keybindings/handle-escape","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","G__56130","js/module$node_modules$$material_ui$icons$index.Done","js/module$node_modules$$material_ui$icons$index.Timer","js/Date","cljs.core/clj->js","js/module$node_modules$$material_ui$icons$index.Today","athens.util.get_day.cljs$core$IFn$_invoke$arity$1","js/module$node_modules$$material_ui$icons$index.YouTube","js/module$node_modules$$material_ui$icons$index.DesktopWindows","athens.keybindings/select-slash-cmd","map__56131","vec__56132","atom-string","expansion","expand","cljs.core/fn?","replace-str","new-str","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/merge","athens.keybindings/handle-enter","map__56136","map__56137","query","map__56140","title","clojure.string/replace-first","map__56142","first","new-tail","G__56144","athens.keybindings/PAIR-CHARS","athens.keybindings/surround","around","temp__5733__auto__","complement","athens.keybindings/handle-system-shortcuts","map__56145","goog.events.KeyCodes/A","goog.dom.selection/setStart","goog.dom.selection/setEnd","goog.events.KeyCodes/Z","goog.events.KeyCodes/X","goog.events.KeyCodes/V","goog.events.KeyCodes/B","goog.events.KeyCodes/I","athens.keybindings/pair-char?","map__56147","pair-char-set","cljs.core/flatten","cljs.core/set","athens.keybindings/handle-pair-char","map__56149","close-pair","js/setTimeout","G__56151","G__56152","goog.dom.selection/setCursorPosition","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","surround-selection","G__56153","G__56154","G__56155","G__56156","four-char","double-brackets?","double-parens?","athens.keybindings/handle-backspace","map__56158","possible-pair","G__56160","p1__56157#","cljs.core/some","G__56161","G__56162","map__56163","cljs.core/last","athens.keybindings/is-character-key?","map__56165","cljs.core/not","goog.events.KeyCodes/isCharacterKey","athens.keybindings/write-char","map__56167","map__56168","new-query","goog.events.KeyCodes/SLASH","athens.db/search-in-block-content","athens.db/search-in-node-title","athens.keybindings/block-key-down","map__56171","goog.events.KeyCodes/TAB","goog.events.KeyCodes/ENTER","goog.events.KeyCodes/BACKSPACE","goog.events.KeyCodes/ESC"],"sourcesContent":["(ns athens.keybindings\n  (:require\n    [\"@material-ui/icons\" :as mui-icons]\n    [athens.db :as db]\n    [athens.util :refer [scroll-if-needed get-day is-beyond-rect?]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [goog.dom.selection :refer [setStart setEnd getText setCursorPosition getEndPoints]]\n    [goog.events.KeyCodes :refer [isCharacterKey]]\n    [re-frame.core :refer [dispatch subscribe]])\n  (:import\n    (goog.events\n      KeyCodes)))\n\n\n(declare slash-options)\n\n\n(defn modifier-keys\n  [e]\n  (let [shift (.. e -shiftKey)\n        meta (.. e -metaKey)\n        ctrl (.. e -ctrlKey)\n        alt (.. e -altKey)]\n    {:shift shift :meta meta :ctrl ctrl :alt alt}))\n\n\n(defn get-end-points\n  [e]\n  (js->clj (getEndPoints (.. e -target))))\n\n\n(defn destruct-event\n  [e]\n  (let [key (.. e -key)\n        key-code (.. e -keyCode)\n        target (.. e -target)\n        value (.. target -value)\n        event {:key key :key-code key-code :target target :value value}\n        modifiers (modifier-keys e)\n        [start end] (get-end-points e)\n        selection (getText target)\n        head (subs value 0 start)\n        tail (subs value end)]\n    (merge modifiers event\n           {:start start :end end}\n           {:head head :tail tail}\n           {:selection selection})))\n\n\n(def ARROW-KEYS\n  {KeyCodes.UP    :up\n   KeyCodes.LEFT  :left\n   KeyCodes.DOWN  :down\n   KeyCodes.RIGHT :right})\n\n\n(defn arrow-key-direction\n  [e]\n  (let [key-code (.. e -keyCode)]\n    (ARROW-KEYS key-code)))\n\n\n(defn block-start?\n  [e]\n  (let [[start _] (get-end-points e)]\n    (zero? start)))\n\n\n(defn block-end?\n  [e]\n  (let [{:keys [value end]} (destruct-event e)]\n    (= end (count value))))\n\n\n(defn handle-arrow-key\n  \"May want to flatten this into multiple handlers.\"\n  [e uid state]\n  (let [{:keys [key-code shift target]} (destruct-event e)\n        ;; TODO\n        top-row?    true\n        bottom-row? true\n        {:search/keys [index results type]} @state\n        selected-items @(subscribe [:selected/items])\n        direction (arrow-key-direction e)]\n\n    (cond\n\n      ;; items already selected, go up or down\n      (and shift (seq selected-items) (= :up direction) (dispatch [:selected/up]))\n      (and shift (seq selected-items) (= :down direction) (dispatch [:selected/down]))\n\n      ;; Only select block if leaving block content (up on top row or down on bottom row). Otherwise select text\n      (and shift (= :up direction) top-row?) (do\n                                               (.. target blur)\n                                               (dispatch [:editing/uid nil])\n                                               (dispatch [:selected/add-item uid]))\n\n      (and shift (= :down direction) bottom-row?) (do\n                                                    (.. target blur)\n                                                    (dispatch [:editing/uid nil])\n                                                    (dispatch [:selected/add-item uid]))\n\n      (= type :slash) (cond\n                        (= :up direction) (do\n                                            (.. e preventDefault)\n                                            (swap! state update :search/index #(dec (if (zero? %) (count slash-options) %)))\n                                            (let [cur-index (:search/index @state)\n                                                  container-el (. js/document getElementById \"slash-menu-container\")\n                                                  next-el (nth (array-seq (.. container-el -children)) cur-index)]\n                                              (when (is-beyond-rect? next-el (.. container-el -parentNode))\n                                                (.. next-el (scrollIntoView false {:behavior \"auto\"})))))\n                        (= :down direction) (do\n                                              (.. e preventDefault)\n                                              (swap! state update :search/index #(if (= % (dec (count slash-options))) 0 (inc %)))\n                                              (let [cur-index (:search/index @state)\n                                                    container-el (. js/document getElementById \"slash-menu-container\")\n                                                    next-el (nth (array-seq (.. container-el -children)) cur-index)]\n                                                (when (is-beyond-rect? next-el container-el)\n                                                  (.. next-el (scrollIntoView false {:behavior \"auto\"}))))))\n\n      (or (= type :page) (= type :block))\n      (cond\n        (= key-code KeyCodes.UP) (do\n                                   (.. e preventDefault)\n                                   (if (= index 0)\n                                     (swap! state assoc :search/index (dec (count results)))\n                                     (swap! state update :search/index dec))\n                                   (scroll-if-needed (.getElementById js/document (str \"result-\" (:search/index @state)))\n                                                     (.getElementById js/document \"dropdown-menu\")))\n        (= key-code KeyCodes.DOWN) (do\n                                     (.. e preventDefault)\n                                     (if (= index (dec (count results)))\n                                       (swap! state assoc :search/index 0)\n                                       (swap! state update :search/index inc))\n                                     (scroll-if-needed (.getElementById js/document (str \"result-\" (:search/index @state)))\n                                                       (.getElementById js/document \"dropdown-menu\"))))\n      :else (cond\n              (and (= key-code KeyCodes.UP) top-row?) (dispatch [:up uid])\n              (and (= key-code KeyCodes.LEFT) (block-start? e)) (dispatch [:left uid])\n              (and (= key-code KeyCodes.DOWN) bottom-row?) (dispatch [:down uid])\n              (and (= key-code KeyCodes.RIGHT) (block-end? e)) (dispatch [:right uid])))))\n\n\n(defn handle-tab\n  [e uid]\n  (.. e preventDefault)\n  (let [{:keys [shift]} (destruct-event e)\n        ;; xxx: probably makes more sense to pass block value to handler directly\n        block-zero? (zero? (:block/order (db/get-block [:block/uid uid])))]\n    (cond\n      shift (dispatch [:unindent uid])\n      :else (when-not block-zero?\n              (dispatch [:indent uid])))))\n\n\n(defn handle-escape\n  [e state]\n  (.. e preventDefault)\n  (prn @state)\n  (prn state)\n  (cond\n    (:search/type @state) (swap! state assoc :search/type nil)\n    :else (dispatch [:editing/uid nil])))\n\n\n;; TODO: some expansions require caret placement after\n;; fixme: perhaps not the best place to put this, but need to access from both blocks and keybindings\n(def slash-options\n  [[mui-icons/Done           \"Add Todo\"      \"{{[[TODO]]}} \" \"cmd-enter\"]\n   [mui-icons/Timer          \"Current Time\"  #(.. (js/Date.) (toLocaleTimeString [] (clj->js {\"timeStyle\" \"short\"})))]\n   [mui-icons/Today          \"Today\"         #(str \"[[\" (:title (get-day 0)) \"]] \")]\n   [mui-icons/Today          \"Tomorrow\"      #(str \"[[\" (:title (get-day -1)) \"]]\")]\n   [mui-icons/Today          \"Yesterday\"     #(str \"[[\" (:title (get-day 1)) \"]]\")]\n   [mui-icons/YouTube        \"YouTube Embed\" \"{{[[youtube]]: }}\"]\n   [mui-icons/DesktopWindows \"iframe Embed\"  \"{{iframe: }}\"]])\n\n;;[mui-icons/ \"Block Embed\" #(str \"[[\" (:title (get-day 1)) \"]]\")]\n;;[mui-icons/DateRange \"Date Picker\"]\n;;[mui-icons/Attachment \"Upload Image or File\"]\n;;[mui-icons/ExposurePlus1 \"Word Count\"]\n\n\n;; TODO: also replace typeahead characters that follow \"/\". may need event to find selectionStart\n(defn select-slash-cmd\n  [index state]\n  (let [{:keys [atom-string]} @state\n        [_ _ expansion _] (slash-options index)\n        expand (if (fn? expansion) (expansion) expansion)\n        replace-str (subs atom-string 0 (dec (count atom-string)))\n        new-str     (str replace-str expand)]\n    (swap! state merge {:search/index 0\n                        :search/type nil\n                        :atom-string  new-str})))\n\n\n(defn handle-enter\n  [e uid state]\n  (let [{:keys [shift meta start head tail value]} (destruct-event e)\n        {:search/keys [query index results type]} @state]\n    (.. e preventDefault)\n    (cond\n      (= type :slash) (select-slash-cmd index state)\n\n      ;; TODO: move caret beyond ]]\n      ;; auto-complete link\n      (= type :page)\n      (let [{:keys [node/title]} (get results index)\n            new-str (clojure.string/replace-first value (str query \"]]\") (str title \"]]\"))]\n        (swap! state merge {:atom-string  new-str\n                            :search/query nil\n                            :search/type  nil}))\n      ;; auto-complete block ref\n      (= type :block)\n      (let [{:keys [block/uid]} (get results index)\n            new-str (clojure.string/replace-first value (str query \"))\") (str uid \"))\"))]\n        (swap! state merge {:atom-string  new-str\n                            :search/query nil\n                            :search/type nil}))\n\n      ;; shift-enter: add line break to textarea\n      shift (swap! state assoc :atom-string (str head \"\\n\" tail))\n      ;; cmd-enter: toggle todo/done\n      meta (let [first    (subs value 0 13)\n                 new-tail (subs value 13)\n                 new-str (cond (= first \"{{[[TODO]]}} \") (str \"{{[[DONE]]}} \" new-tail)\n                               (= first \"{{[[DONE]]}} \") new-tail\n                               :else (str \"{{[[TODO]]}} \" value))]\n             (swap! state assoc :atom-string new-str))\n      ;; default: may mutate blocks\n      :else (dispatch [:enter uid value start]))))\n\n\n;; todo: do this for ** and __\n(def PAIR-CHARS\n  {\"(\" \")\"\n   \"[\" \"]\"\n   \"{\" \"}\"\n   \"\\\"\" \"\\\"\"})\n  ;;\"`\" \"`\"\n  ;;\"*\" \"*\"\n   ;;\"_\" \"_\"})\n\n\n(defn surround\n  \"https://github.com/tpope/vim-surround\"\n  [selection around]\n  (if-let [complement (get PAIR-CHARS around)]\n    (str around selection complement)\n    (str around selection around)))\n\n\n;; TODO: it's ctrl for windows and linux right?\n(defn handle-system-shortcuts\n  \"Assumes meta is selected\"\n  [e _ state]\n  (let [{:keys [key-code target end selection]} (destruct-event e)]\n    (cond\n      (= key-code KeyCodes.A) (do (setStart target 0)\n                                  (setEnd target end))\n\n      ;; TODO: undo. conflicts with datascript undo\n      (= key-code KeyCodes.Z) (prn \"undo\")\n\n      ;; TODO: cut\n      (= key-code KeyCodes.X) (prn \"cut\")\n\n      ;; TODO: paste. magical\n      (= key-code KeyCodes.V) (prn \"paste\")\n\n      ;; TODO: bold\n      (= key-code KeyCodes.B) (let [new-str (surround selection \"**\")]\n                                (swap! state assoc :atom-string new-str))\n\n      ;; TODO: italicize\n      (= key-code KeyCodes.I) (let [new-str (surround selection \"__\")]\n                                (swap! state assoc :atom-string new-str)))))\n\n\n(defn pair-char?\n  [e]\n  (let [{:keys [key]} (destruct-event e)\n        pair-char-set (-> PAIR-CHARS\n                          seq\n                          flatten\n                          set)]\n    (pair-char-set key)))\n\n\n(defn handle-pair-char\n  [e _ state]\n  (let [{:keys [key head tail target start end selection]} (destruct-event e)\n        close-pair (get PAIR-CHARS key)]\n    (cond\n      (= start end) (let [new-str (str head key close-pair tail)]\n                      (js/setTimeout #(setCursorPosition target (inc start)) 10)\n                      (swap! state assoc :atom-string new-str))\n      (not= start end) (let [surround-selection (surround selection key)\n                             new-str (str head surround-selection tail)]\n                         (swap! state assoc :atom-string new-str)\n                         (js/setTimeout (fn []\n                                          (setStart target (inc start))\n                                          (setEnd target (inc end)))\n                                        10)))\n\n    ;; this is naive way to begin doing inline search. how to begin search with non-empty parens?\n    (let [four-char (subs (:atom-string @state) (dec start) (+ start 3))\n          double-brackets? (= \"[[]]\" four-char)\n          double-parens?   (= \"(())\" four-char)]\n      (cond\n        double-brackets? (swap! state assoc :search/type :page)\n        double-parens? (swap! state assoc :search/type :block)))))\n\n    ;; TODO: close bracket should not be created if it already exists\n    ;;(= key-code KeyCodes.CLOSE_SQUARE_BRACKET)\n\n\n\n(defn handle-backspace\n  [e uid state]\n  (let [{:keys [start end value head tail target meta]} (destruct-event e)\n        possible-pair (subs value (dec start) (inc start))]\n\n    (cond\n      ;; if selection, delete selected text\n      (not= start end) (let [new-tail (subs value end)\n                             new-str (str head new-tail)]\n                         (swap! state assoc :atom-string new-str))\n\n      ;; if meta, delete to start of line\n      meta (swap! state assoc :atom-string tail)\n\n      ;; if at block start, dispatch (requires context)\n      (block-start? e) (dispatch [:backspace uid value])\n\n      ;; if within brackets, delete close bracket as well\n      ;; todo: parameterize, use PAIR-CHARS\n      (some #(= possible-pair %) [\"[]\" \"{}\" \"()\"])\n      (let [head    (subs value 0 (dec start))\n            tail    (subs value (inc start))\n            new-str (str head tail)]\n        (swap! state assoc :atom-string new-str)\n        (swap! state assoc :search/type nil)\n        (js/setTimeout #(setCursorPosition target (dec start)) 10))\n\n      ;; default backspace: delete a character\n      :else (let [head    (subs value 0 (dec start))\n                  new-str (str head tail)\n                  {:search/keys [query]} @state]\n              (when (= \"/\" (last value))\n                (swap! state merge {:search/type nil\n                                    :search/query nil}))\n              (when query\n                (swap! state assoc :search/query (subs query 0 (dec (count query)))))\n              (swap! state assoc :atom-string new-str)))))\n\n\n(defn is-character-key?\n  \"Closure returns true even when using modifier keys. We do not make that assumption.\"\n  [e]\n  (let [{:keys [meta ctrl alt key-code]} (destruct-event e)]\n    (and (not meta) (not ctrl) (not alt)\n         (isCharacterKey key-code))))\n\n\n(defn write-char\n  [e _ state]\n  (let [{:keys [head tail key key-code]} (destruct-event e)\n        new-str (str head key tail)\n        {:search/keys [query type]} @state\n        new-query (str query key)]\n    (cond\n      (= key-code KeyCodes.SLASH) (swap! state merge {:search/query \"\"\n                                                      :search/type :slash})\n\n      (= type :slash) (swap! state assoc :search/query new-str)\n\n      ;; when in-line search dropdown is open\n      (= type :block) (let [results (db/search-in-block-content query)]\n                        (swap! state assoc :search/query new-query)\n                        (swap! state assoc :search/results results))\n\n    ;; when in-line search dropdown is open\n      (= type :page) (let [results (db/search-in-node-title query)]\n                       (swap! state assoc :search/query new-query)\n                       (swap! state assoc :search/results results)))\n\n    (swap! state merge {:atom-string new-str})))\n\n\n;; XXX: what happens here when we have multi-block selection? In this case we pass in `uids` instead of `uid`\n(defn block-key-down\n  [e uid state]\n  (let [{:keys [meta key-code]} (destruct-event e)]\n    (cond\n      (arrow-key-direction e) (handle-arrow-key e uid state)\n      (pair-char? e) (handle-pair-char e uid state)\n      (= key-code KeyCodes.TAB) (handle-tab e uid)\n      (= key-code KeyCodes.ENTER) (handle-enter e uid state)\n      (= key-code KeyCodes.BACKSPACE) (handle-backspace e uid state)\n      (= key-code KeyCodes.ESC) (handle-escape e state)\n      meta (handle-system-shortcuts e uid state)\n\n      ;; -- Default: Add new character -----------------------------------------\n      (is-character-key? e) (write-char e uid state))))\n\n\n;;:else (prn \"non-event\" key key-code))))\n\n"]}